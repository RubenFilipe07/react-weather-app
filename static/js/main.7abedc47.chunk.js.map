{"version":3,"sources":["components/locationRequest.jsx","components/loading.gif","components/loading.jsx","App.js","reportWebVitals.js","index.js"],"names":["LocationRequest","className","Loading","src","loadingAnimation","alt","App","useState","location","setLocation","weather","setWeather","getWeather","lat","long","a","axios","get","params","lon","appid","process","lang","units","res","data","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","err","alert","code","message","iconCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAWeA,EARU,WACrB,OACK,cAAC,WAAD,UACI,oBAAIC,UAAU,SAAd,uDCNE,G,MAAA,IAA0B,qCCa1BC,EATE,WACb,OACK,eAAC,WAAD,WACI,oBAAID,UAAU,SAAd,yCACD,qBAAKE,IAAKC,EAAkBC,IAAI,gB,MCsD7BC,MAxDf,WACE,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEIC,EAAU,uCAAG,WAAOC,EAAKC,GAAZ,eAAAC,EAAA,sEACCC,IAAMC,IAAI,kDAAmD,CAC3EC,OAAQ,CACNL,IAAKA,EACLM,IAAKL,EACLM,MAAOC,mCACPC,KAAM,KACNC,MAAO,YAPI,OACXC,EADW,OAUfb,EAAWa,EAAIC,MAVA,2CAAH,wDA0Bd,GAbAC,qBAAU,WACJC,WAAaA,UAAUC,aACzBD,UAAUC,YAAYC,oBAAmB,SAACC,GACxClB,EAAWkB,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WACrDxB,GAAY,MAEZ,SAAAyB,GACEC,MAAM,SAAD,OAAUD,EAAIE,KAAd,cAAwBF,EAAIG,eAItC,KAEc,IAAb7B,EACF,OACE,cAAC,WAAD,UACE,cAAC,EAAD,MAID,IAAgB,IAAZE,EACP,OACE,cAAC,WAAD,UACE,cAAC,EAAD,MAKJ,IAAI4B,EAAW5B,EAAO,QAAY,GAAnB,KACf,OACE,sBAAKT,UAAU,YAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBS,EAAO,OAC7B,qBAAIT,UAAU,cAAd,UAA6BS,EAAO,KAAP,KAA7B,YACA,qBAAKT,UAAU,iBAAiBE,IAAG,2CAAsCmC,EAAtC,QAAsDjC,IAAI,cAC7F,mBAAGJ,UAAU,YAAb,SAA0BS,EAAO,QAAY,GAAnB,kBC7CnB6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.7abedc47.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport './locationRequest.css'\r\n\r\nconst LocationRequest =  () =>{\r\n    return(\r\n         <Fragment>\r\n             <h1 className=\"center\">Enable location access in your browser</h1>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default LocationRequest;\r\n","export default __webpack_public_path__ + \"static/media/loading.063d965a.gif\";","import React, { Fragment } from 'react';\r\nimport './loading.css'\r\nimport loadingAnimation from './loading.gif'\r\n\r\nconst Loading =  () =>{\r\n    return(\r\n         <Fragment>\r\n             <h1 className=\"center\">loading weather information</h1>\r\n            <img src={loadingAnimation} alt=\"loading\" />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Loading;\r\n","import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LocationRequest from './components/locationRequest';\nimport Loading from './components/loading';\nimport './App.css'\n\nfunction App() {\n  const [location, setLocation] = useState(false);\n  const [weather, setWeather] = useState(false);\n\n  let getWeather = async (lat, long) => {\n    let res = await axios.get(\"https://api.openweathermap.org/data/2.5/weather\", {\n      params: {\n        lat: lat,\n        lon: long,\n        appid: process.env.REACT_APP_OPEN_WHEATHER_KEY,\n        lang: 'pt',\n        units: 'metric',\n      }\n    });\n    setWeather(res.data);\n  }\n\n  useEffect(() => {\n    if (navigator && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        getWeather(position.coords.latitude, position.coords.longitude);\n        setLocation(true)\n      },\n        err => {\n          alert(`ERROR(${err.code}): ${err.message}`)\n        }\n      )\n    }\n  }, [])\n\n  if (location === false) {\n    return (\n      <Fragment>\n        <LocationRequest />\n      </Fragment>\n    )\n  }\n  else if (weather === false) {\n    return (\n      <Fragment>\n        <Loading />\n      </Fragment>\n    )\n  }\n  else {\n    let iconCode = weather['weather'][0]['icon']\n    return (\n      <div className=\"interface\">\n        <h3 className=\"city\">{weather['name']}</h3>\n        <h1 className=\"temperature\">{weather['main']['temp']}Â° C</h1>\n        <img className=\"condition-icon\" src={`http://openweathermap.org/img/wn/${iconCode}.png`} alt=\"condition\" />\n        <p className=\"condition\">{weather['weather'][0]['description']}</p>\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}